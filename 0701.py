# -*- coding: utf-8 -*-
"""0701.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12VnmJOSlG_PW8GMFsU0dbY9Oowkeb25V
"""

import streamlit as st
import time

# --- Streamlit UI 구성 ---

st.set_page_config(page_title="정책 큐레이터 (UI)", page_icon="🤖")
st.title("🤖 정책 큐레이터 (UI 프로토타입)")
st.caption("AI 챗봇의 프런트엔드 화면입니다. 현재 백엔드 로직은 연결되어 있지 않습니다.")

with st.sidebar:
    st.header("안내")
    st.markdown("""
    이 앱은 실제 AI가 답변하지 않는 UI 프로토타입입니다.
    사용자 인터페이스의 디자인과 흐름을 확인하기 위한 버전입니다.

    **배포 안내:**
    1. 이 프로젝트를 GitHub에 업로드하세요.
    2. Streamlit Cloud에 배포 시, **API 키를 설정할 필요가 없습니다.**
    """)
    st.info("현재는 고정된 답변만 반환합니다.")

# 세션 상태를 사용하여 대화 기록 저장
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "안녕하세요! 어떤 정책이 궁금하신가요? (UI 테스트 메시지)"}
    ]

# 이전 대화 기록 표시
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# 사용자 입력 처리
if prompt := st.chat_input("여기에 질문을 입력하세요..."):
    # 사용자 메시지를 대화 기록에 추가하고 화면에 표시
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # 봇의 답변을 시뮬레이션
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        # 타이핑 효과를 위한 간단한 지연
        time.sleep(0.5)

        # 고정된 답변
        full_response = "현재는 프런트엔드 UI만 구현된 상태입니다. 실제 답변 기능은 연결되지 않았습니다."
        message_placeholder.markdown(full_response)

    # 시뮬레이션된 봇 답변을 대화 기록에 추가
    st.session_state.messages.append({"role": "assistant", "content": full_response})